{
  "name": "Working Held Connection",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://shop.held.de/api/oauth/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "SWIANEPSMGTHMLJMT1BHEFAZNW"
            },
            {
              "name": "client_secret",
              "value": "UVJKRGFWZENoVW9OY1ZuUktYNkN6NFRucVNVQU1VR1B0cElhUzE"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "get-oauth-token",
      "name": "Get OAuth Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [400, 400],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Validate OAuth token\nconst response = $json;\n\nconsole.log('üîç OAuth Response:');\nconsole.log('Has access_token:', !!response.access_token);\nconsole.log('Token type:', response.token_type);\nconsole.log('Expires in:', response.expires_in);\n\nif (!response.access_token) {\n  console.log('‚ùå OAuth failed:', response);\n  throw new Error('Failed to get OAuth token: ' + (response.error || 'Unknown error'));\n}\n\nconsole.log('‚úÖ OAuth token obtained successfully');\n\nreturn [{\n  json: {\n    accessToken: response.access_token,\n    tokenType: response.token_type || 'Bearer'\n  }\n}];"
      },
      "id": "validate-token",
      "name": "Validate Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "url": "https://shop.held.de/api/product?page=1&limit=20",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.accessToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch-products-test",
      "name": "Fetch Products Test",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [800, 400],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Test products response\nconst response = $json;\n\nconsole.log('üõçÔ∏è  Products Response:');\nconsole.log('Response type:', typeof response);\nconsole.log('Has data:', !!response.data);\nconsole.log('Data type:', typeof response.data);\nconsole.log('Data length:', Array.isArray(response.data) ? response.data.length : 'not array');\nconsole.log('Total:', response.total);\nconsole.log('Page:', response.page);\nconsole.log('Limit:', response.limit);\n\nif (response.error) {\n  console.log('‚ùå Products API error:', response.error);\n  return [{ json: { error: true, message: response.error } }];\n}\n\nif (response.data && Array.isArray(response.data) && response.data.length > 0) {\n  console.log('‚úÖ Products found!');\n  console.log('Sample product:');\n  const sample = response.data[0];\n  console.log('- ID:', sample.id);\n  console.log('- Name:', sample.name);\n  console.log('- Active:', sample.active);\n  \n  return [{\n    json: {\n      success: true,\n      productsFound: response.data.length,\n      totalAvailable: response.total,\n      sampleProduct: {\n        id: sample.id,\n        name: sample.name,\n        active: sample.active\n      },\n      allProducts: response.data\n    }\n  }];\n} else {\n  console.log('‚ö†Ô∏è  No products found or unexpected format');\n  console.log('Full response:', JSON.stringify(response, null, 2));\n  \n  return [{\n    json: {\n      success: false,\n      message: 'No products found',\n      response: response\n    }\n  }];\n}"
      },
      "id": "analyze-products",
      "name": "Analyze Products",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get OAuth Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OAuth Token": {
      "main": [
        [
          {
            "node": "Validate Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Token": {
      "main": [
        [
          {
            "node": "Fetch Products Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Products Test": {
      "main": [
        [
          {
            "node": "Analyze Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}