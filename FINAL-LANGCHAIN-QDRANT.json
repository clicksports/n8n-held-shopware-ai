{
  "name": "üöÄ FINAL: Shopware ‚Üí Qdrant (LangChain)",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://shop.held.de/api/oauth/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "SWIANEPSMGTHMLJMT1BHEFAZNW"
            },
            {
              "name": "client_secret",
              "value": "UVJKRGFWZENoVW9OY1ZuUktYNkN6NFRucVNVQU1VR1B0cElhUzE"
            }
          ]
        }
      },
      "id": "oauth-node",
      "name": "Get OAuth",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [400, 400]
    },
    {
      "parameters": {
        "jsCode": "const response = $json;\nif (!response.access_token) throw new Error('OAuth failed');\nconsole.log('‚úÖ OAuth success');\n\nreturn [{ json: { \n  token: response.access_token, \n  page: 1, \n  limit: 50,\n  allProducts: [],\n  continueLoop: true\n} }];"
      },
      "id": "init-node",
      "name": "Initialize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "url": "=https://shop.held.de/api/product?page={{ $json.page }}&limit={{ $json.limit }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.token }}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "fetch-node",
      "name": "Fetch Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [800, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process pagination\nconst response = $json;\nconst state = $node[\"Initialize\"].json;\n\nif (response.error || !response.data) {\n  console.log('‚ùå Error:', response.error);\n  return [{ json: {\n    products: state.allProducts,\n    totalProducts: state.allProducts.length,\n    finished: true\n  } }];\n}\n\nconst pageProducts = response.data || [];\nconst apiTotal = response.total || 0;\nconst currentPage = response.page || state.page;\nconst limit = response.limit || state.limit;\nconst allProducts = [...state.allProducts, ...pageProducts];\n\nconsole.log(`üìÑ Page ${currentPage}: +${pageProducts.length} products`);\nconsole.log(`üìä Total collected: ${allProducts.length}`);\n\n// Check if should continue\nlet shouldContinue = false;\nif (currentPage === 1 && apiTotal === limit) {\n  shouldContinue = pageProducts.length === limit;\n  console.log('‚ö†Ô∏è  Using count-based pagination');\n} else {\n  const totalPages = Math.ceil(apiTotal / limit);\n  shouldContinue = currentPage < totalPages && pageProducts.length > 0;\n}\n\nif (shouldContinue) {\n  console.log('‚úÖ Fetching next page...');\n  return [{ json: { \n    token: state.token, \n    page: currentPage + 1, \n    limit: limit, \n    allProducts: allProducts,\n    continueLoop: true,\n    finished: false\n  } }];\n} else {\n  console.log('üèÅ All products fetched!');\n  return [{ json: {\n    products: allProducts,\n    totalProducts: allProducts.length,\n    finished: true\n  } }];\n}"
      },
      "id": "process-node",
      "name": "Process Pagination",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "jsCode": "// Route based on pagination status\nconst data = $json;\n\nif (data.finished) {\n  console.log('üéØ All products fetched, preparing for Qdrant...');\n  return [{ json: data }];\n} else {\n  console.log('üîÑ More pages to fetch...');\n  return [{ json: data }];\n}"
      },
      "id": "router-node",
      "name": "Route Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "unit": "seconds",
        "value": 1
      },
      "id": "wait-node",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "jsCode": "// Transform products for Qdrant document format\nconst data = $json;\nconst products = data.products;\n\nif (!products || products.length === 0) {\n  console.log('‚ùå No products to upload');\n  return [];\n}\n\nconsole.log(`\\nüîÑ TRANSFORMING ${products.length} PRODUCTS FOR QDRANT`);\n\n// Transform each product to document format for VectorStoreQdrant\nconst documents = products.map((product, idx) => {\n  // Create comprehensive text for embedding\n  const textParts = [];\n  if (product.name) textParts.push(`Product: ${product.name}`);\n  if (product.productNumber) textParts.push(`SKU: ${product.productNumber}`);\n  if (product.description) textParts.push(`Description: ${product.description}`);\n  if (product.price?.gross) textParts.push(`Price: ‚Ç¨${product.price.gross}`);\n  if (product.manufacturer?.name) textParts.push(`Brand: ${product.manufacturer.name}`);\n  \n  const pageContent = textParts.join('. ');\n  \n  return {\n    json: {\n      pageContent: pageContent,\n      metadata: {\n        product_id: product.id,\n        name: product.name || product.productNumber || 'Unknown',\n        sku: product.productNumber || '',\n        price: product.price?.gross || 0,\n        description: product.description || '',\n        manufacturer: product.manufacturer?.name || '',\n        active: product.active !== false,\n        source: 'shopware-held-de',\n        synced_at: new Date().toISOString()\n      }\n    }\n  };\n});\n\nconsole.log(`üì¶ Transformed ${documents.length} documents`);\nconsole.log('üìù Sample document:', {\n  pageContent: documents[0].json.pageContent.substring(0, 100) + '...',\n  metadata: documents[0].json.metadata\n});\n\n// Return documents for Qdrant vector store\nreturn documents;"
      },
      "id": "transform-node",
      "name": "Transform to Documents",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 500]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "embeddings-node",
      "name": "OpenAI Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [1600, 600],
      "credentials": {
        "openAiApi": {
          "id": "openai-api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "mode": "list",
          "value": "shopware_products"
        },
        "options": {}
      },
      "id": "qdrant-node",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [1800, 500],
      "credentials": {
        "qdrantApi": {
          "id": "qdrant-local",
          "name": "Qdrant Local"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst total = items.length;\n\nconsole.log('\\nüéâ SHOPWARE ‚Üí QDRANT SYNC COMPLETE!');\nconsole.log('==========================================');\nconsole.log(`üìä Products uploaded: ${total}`);\nconsole.log(`üîç Collection: shopware_products`);\nconsole.log(`üåê Qdrant Dashboard: http://localhost:6333/dashboard`);\nconsole.log(`üìê Embeddings: OpenAI text-embedding-3-small`);\n\nconsole.log('\\n‚úÖ SUCCESS! Your products are now searchable in Qdrant!');\nconsole.log('\\nüí° Next steps:');\nconsole.log('   1. Configure OpenAI credentials in n8n');\nconsole.log('   2. Configure Qdrant credentials (URL: http://qdrant:6333)');\nconsole.log('   3. Use Qdrant Retrieve node for semantic search');\nconsole.log('   4. Connect to your AI chatbot workflow');\n\nreturn [{ json: { \n  success: true,\n  productsUploaded: total,\n  collection: 'shopware_products',\n  embeddingModel: 'text-embedding-3-small',\n  timestamp: new Date().toISOString()\n} }];"
      },
      "id": "success-node",
      "name": "Success Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get OAuth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OAuth": {
      "main": [
        [
          {
            "node": "Initialize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize": {
      "main": [
        [
          {
            "node": "Fetch Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Products": {
      "main": [
        [
          {
            "node": "Process Pagination",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Pagination": {
      "main": [
        [
          {
            "node": "Route Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Logic": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          },
          {
            "node": "Transform to Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Fetch Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to Documents": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Embeddings": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "Success Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}