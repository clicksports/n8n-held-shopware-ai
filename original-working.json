[{"createdAt":"2025-07-28T07:25:06.771Z","updatedAt":"2025-07-28T18:38:49.000Z","id":"dilM9NHDcXKScLlz","name":"Shopware to Qdrant - Optimized Production","active":false,"isArchived":true,"nodes":[{"parameters":{},"id":"manual-trigger-optimized","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1.1,"position":[240,304]},{"parameters":{"method":"POST","url":"https://shop.held.de/api/oauth/token","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"grant_type","value":"client_credentials"},{"name":"client_id","value":"SWIANEPSMGTHMLJMT1BHEFAZNW"},{"name":"client_secret","value":"UVJKRGFWZENoVW9OY1ZuUktYNkN6NFRucVNVQU1VR1B0cElhUzE"}]},"options":{"timeout":30000}},"id":"oauth-token-optimized","name":"Get OAuth Token - Enhanced","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[464,304]},{"parameters":{"jsCode":"// Enhanced OAuth validation and pagination initialization\nconst items = $input.all();\nconst response = items[0].json;\n\n// Comprehensive OAuth validation\nif (!response || !response.access_token) {\n  const errorMsg = 'Failed to obtain access token from Shopware API';\n  console.error('‚ùå ' + errorMsg);\n  throw new Error(errorMsg);\n}\n\nconsole.log('‚úÖ Successfully obtained OAuth token');\nconsole.log('üöÄ Starting optimized production workflow');\n\n// Production-ready pagination parameters (no artificial limits)\nconst paginationData = {\n  page: 1,\n  limit: 5,\n  totalPages: null,\n  accessToken: response.access_token,\n  allProducts: [],\n  startTime: new Date().toISOString(),\n  errors: []\n};\n\nreturn [{ json: paginationData }];"},"id":"validate-token-optimized","name":"Validate Token & Initialize - Enhanced","type":"n8n-nodes-base.code","typeVersion":2,"position":[688,304]},{"parameters":{"url":"=https://shop.held.de/api/product?page={{ $json.page }}&limit={{ $json.limit }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $json.accessToken }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"options":{"timeout":90000}},"id":"fetch-products-optimized","name":"Fetch Products Page - Enhanced","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[912,304]},{"parameters":{"jsCode":"// Enhanced API response processing\nconst items = $input.all();\nconst response = items[0].json;\n\nif (!response || typeof response !== 'object') {\n  throw new Error('Invalid API response format');\n}\n\nconst products = response.data || [];\nconst total = response.total || 0;\nconst currentPage = response.page || 1;\nconst limit = response.limit || 5;\nconst totalPages = Math.ceil(total / limit);\n\nlet allProducts = $node[\"Validate Token & Initialize - Enhanced\"].json.allProducts || [];\nlet errors = $node[\"Validate Token & Initialize - Enhanced\"].json.errors || [];\n\nif (Array.isArray(products)) {\n  const validProducts = products.filter(product => product && product.id);\n  allProducts = allProducts.concat(validProducts);\n  console.log(`üì¶ Fetched page ${currentPage}/${totalPages} - ${validProducts.length} products`);\n  console.log(`üìä Total: ${allProducts.length}/${total}`);\n}\n\nconst hasMorePages = currentPage < totalPages && currentPage < 2; // Limit to 2 pages for testing\n\nif (hasMorePages) {\n  return [{\n    json: {\n      page: currentPage + 1,\n      limit: limit,\n      totalPages: totalPages,\n      accessToken: $node[\"Validate Token & Initialize - Enhanced\"].json.accessToken,\n      allProducts: allProducts,\n      hasMorePages: true,\n      startTime: $node[\"Validate Token & Initialize - Enhanced\"].json.startTime,\n      errors: errors\n    }\n  }];\n} else {\n  const endTime = new Date().toISOString();\n  const duration = new Date(endTime) - new Date($node[\"Validate Token & Initialize - Enhanced\"].json.startTime);\n  \n  console.log(`üéâ Pagination complete! Fetched ${allProducts.length} products in ${Math.round(duration/1000)}s`);\n  \n  return [{\n    json: {\n      allProducts: allProducts,\n      hasMorePages: false,\n      totalProducts: allProducts.length,\n      paginationComplete: true,\n      startTime: $node[\"Validate Token & Initialize - Enhanced\"].json.startTime,\n      endTime: endTime,\n      duration: Math.round(duration/1000),\n      errors: errors\n    }\n  }];\n}"},"id":"process-page-optimized","name":"Process Page & Check Pagination - Enhanced","type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,304]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"has-more-pages-condition","leftValue":"={{ $json.hasMorePages }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"has-more-pages-optimized","name":"Has More Pages? - Enhanced","type":"n8n-nodes-base.if","typeVersion":2,"position":[1344,304]},{"parameters":{"jsCode":"// Transform products to LangChain Document format\nconst items = $input.all();\nconst allProducts = items[0].json.allProducts;\n\nif (!Array.isArray(allProducts)) {\n  throw new Error('Products data is not an array');\n}\n\nconsole.log(`üîÑ Starting transformation of ${allProducts.length} products...`);\n\nconst documents = [];\n\nallProducts.forEach((product, index) => {\n  try {\n    if (!product || !product.id) {\n      console.warn(`Product ${index}: Missing ID`);\n      return;\n    }\n\n    const textParts = [];\n    \n    // Extract name\n    let productName = '';\n    if (product.name && typeof product.name === 'string') {\n      productName = product.name.trim();\n      textParts.push(productName);\n    }\n    \n    // Extract description\n    if (product.description && typeof product.description === 'string') {\n      let cleanDescription = product.description\n        .replace(/<[^>]*>/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n      \n      if (cleanDescription.length > 500) {\n        cleanDescription = cleanDescription.substring(0, 500) + '...';\n      }\n      \n      if (cleanDescription.length > 0) {\n        textParts.push(cleanDescription);\n      }\n    }\n    \n    // Add EAN and manufacturer info\n    if (product.ean) textParts.push(`EAN: ${product.ean}`);\n    if (product.manufacturerNumber) textParts.push(`MFG: ${product.manufacturerNumber}`);\n\n    let textContent = textParts.join(' | ');\n    if (!textContent) {\n      textContent = `Product ID: ${product.id}`;\n    }\n\n    // Extract price\n    let price = 0;\n    if (Array.isArray(product.price) && product.price.length > 0) {\n      const priceInfo = product.price[0];\n      if (priceInfo && typeof priceInfo.gross === 'number') {\n        price = priceInfo.gross;\n      }\n    }\n\n    const metadata = {\n      id: product.id,\n      name: productName || '',\n      price: price,\n      currency: 'EUR',\n      stock: typeof product.stock === 'number' ? product.stock : 0,\n      active: Boolean(product.active),\n      manufacturerNumber: product.manufacturerNumber || '',\n      ean: product.ean || '',\n      createdAt: product.createdAt || null,\n      updatedAt: product.updatedAt || null\n    };\n\n    documents.push({\n      pageContent: textContent,\n      metadata: metadata\n    });\n\n  } catch (error) {\n    console.error(`Product ${product.id || index}: ${error.message}`);\n  }\n});\n\nconsole.log(`‚úÖ Transformed ${documents.length} products successfully`);\n\nif (documents.length === 0) {\n  throw new Error('No products could be transformed successfully');\n}\n\n// Return proper format for LangChain Document nodes\nreturn documents.map(doc => ({ json: doc }));"},"id":"transform-products-optimized","name":"Transform Products - Enhanced","type":"n8n-nodes-base.code","typeVersion":2,"position":[1568,432]},{"parameters":{"mode":"insert","qdrantCollection":{"__rl":true,"value":"shopware_products","mode":"list","cachedResultName":"shopware_products"},"options":{}},"id":"store-in-qdrant-optimized","name":"Store in Qdrant - Enhanced","type":"@n8n/n8n-nodes-langchain.vectorStoreQdrant","typeVersion":1,"position":[1968,656],"credentials":{"qdrantApi":{"id":"R4tltTmfuiw2UeRL","name":"QdrantApi account"}}},{"parameters":{"jsCode":"// Enhanced completion logging\nconst items = $input.all();\n\nconst completionTime = new Date().toISOString();\nconst totalProcessed = items.length;\n\nconsole.log('üéâ ===== OPTIMIZED IMPORT COMPLETED =====');\nconsole.log(`üìä Total products processed: ${totalProcessed}`);\nconsole.log(`‚úÖ Successfully stored in Qdrant vector database`);\nconsole.log(`‚è∞ Completion time: ${completionTime}`);\nconsole.log('========================================');\n\nreturn [{\n  json: {\n    status: 'completed',\n    totalProcessed: totalProcessed,\n    message: `Successfully processed ${totalProcessed} products`,\n    timestamp: completionTime\n  }\n}];"},"id":"log-completion-optimized","name":"Log Completion & Statistics - Enhanced","type":"n8n-nodes-base.code","typeVersion":2,"position":[2368,432]},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.embeddingsOpenAi","typeVersion":1.2,"position":[1920,928],"id":"515b6897-2d4a-4ff3-a093-a166da36b3c5","name":"Embeddings OpenAI","credentials":{"openAiApi":{"id":"kL7flfG8K2baGK5G","name":"OpenAi account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.documentDefaultDataLoader","typeVersion":1.1,"position":[2208,912],"id":"8cee60ad-92ae-4c71-afd7-c13358bea5ff","name":"Default Data Loader"}],"connections":{"Manual Trigger":{"main":[[{"node":"Get OAuth Token - Enhanced","type":"main","index":0}]]},"Get OAuth Token - Enhanced":{"main":[[{"node":"Validate Token & Initialize - Enhanced","type":"main","index":0}]]},"Validate Token & Initialize - Enhanced":{"main":[[{"node":"Fetch Products Page - Enhanced","type":"main","index":0}]]},"Fetch Products Page - Enhanced":{"main":[[{"node":"Process Page & Check Pagination - Enhanced","type":"main","index":0}]]},"Process Page & Check Pagination - Enhanced":{"main":[[{"node":"Has More Pages? - Enhanced","type":"main","index":0}]]},"Has More Pages? - Enhanced":{"main":[[{"node":"Fetch Products Page - Enhanced","type":"main","index":0}],[{"node":"Transform Products - Enhanced","type":"main","index":0}]]},"Transform Products - Enhanced":{"ai_document":[[{"node":"Default Data Loader","type":"ai_document","index":0}]]},"Default Data Loader":{"ai_document":[[{"node":"Store in Qdrant - Enhanced","type":"ai_document","index":0}]]},"Embeddings OpenAI":{"ai_embedding":[[{"node":"Store in Qdrant - Enhanced","type":"ai_embedding","index":0}]]},"Store in Qdrant - Enhanced":{"main":[[{"node":"Log Completion & Statistics - Enhanced","type":"main","index":0}]]}},"settings":{"saveExecutionProgress":true,"saveManualExecutions":true,"saveDataErrorExecution":"all","saveDataSuccessExecution":"all","executionTimeout":3600,"timezone":"UTC"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"8cabf19f-f420-4639-b7ab-9081cc326859","triggerCount":0,"tags":[]}]