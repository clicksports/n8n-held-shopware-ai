{
  "name": "Fixed JS Router Pagination",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "jsCode": "// Initialize pagination state\nconst state = {\n  page: 1,\n  limit: 20,\n  continueLoop: true,\n  allProducts: [],\n  totalPages: null,\n  errors: []\n};\n\nconsole.log('üöÄ Starting pagination');\nconsole.log('Initial state:', JSON.stringify(state, null, 2));\n\nreturn [{ json: state }];"
      },
      "id": "init",
      "name": "Initialize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "mode": "expression",
        "output": "empty",
        "rules": {
          "values": [
            {
              "output": 0,
              "outputKey": "",
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "loose"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    },
                    "leftValue": "={{ $json.continueLoop }}",
                    "rightValue": ""
                  }
                ]
              }
            },
            {
              "output": 1,
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "loose"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "boolean",
                      "operation": "false"
                    },
                    "leftValue": "={{ $json.continueLoop }}",
                    "rightValue": ""
                  }
                ]
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 1
        }
      },
      "id": "switch-router",
      "name": "Switch Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [600, 400]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopwareApi", 
        "url": "/api/search/product",
        "httpMethod": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  page: $json.page,\n  limit: $json.limit,\n  filter: [{\n    type: \"equals\",\n    field: \"active\", \n    value: true\n  }],\n  includes: {\n    product: [\"id\", \"name\", \"productNumber\", \"description\", \"price\", \"availableStock\"]\n  }\n}) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch",
      "name": "Fetch Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [800, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Process response and update state\nconst response = $input.first().json;\nconst state = $node[\"Switch Router\"].json;\n\nconsole.log('\\nüì• Processing API response');\nconsole.log('Response has data:', !!response.data);\nconsole.log('Response total:', response.total);\n\nif (response.error || !response.data) {\n  console.log('‚ùå API error, stopping');\n  return [{\n    json: {\n      ...state,\n      continueLoop: false,\n      errors: [...state.errors, response.error || 'No data']\n    }\n  }];\n}\n\nconst products = response.data || [];\nconst total = response.total || 0;\nconst currentPage = state.page;\n\n// Calculate pagination\nconst totalPages = Math.ceil(total / state.limit);\nconst continueLoop = currentPage < totalPages;\n\n// Update state\nconst allProducts = [...state.allProducts, ...products];\n\nconsole.log(`üìÑ Page ${currentPage}/${totalPages}: ${products.length} products`);\nconsole.log(`üìä Total collected: ${allProducts.length}/${total}`);\nconsole.log(`üîÑ Will continue: ${continueLoop}`);\n\nconst newState = {\n  page: currentPage + 1,\n  limit: state.limit,\n  continueLoop: continueLoop,\n  allProducts: allProducts,\n  totalPages: totalPages,\n  totalFetched: allProducts.length,\n  totalAvailable: total,\n  errors: state.errors\n};\n\nreturn [{ json: newState }];"
      },
      "id": "process",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "unit": "seconds",
        "value": 1
      },
      "id": "wait",
      "name": "Wait 1s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Final summary when all products collected\nconst state = $json;\n\nconsole.log('\\nüéâ PAGINATION COMPLETE!');\nconsole.log(`üìä Final Results:`);\nconsole.log(`   Total products: ${state.allProducts.length}`);\nconsole.log(`   Total available: ${state.totalAvailable}`);\nconsole.log(`   Pages fetched: ${state.page - 1}`);\nconsole.log(`   Errors: ${state.errors.length}`);\n\nif (state.errors.length > 0) {\n  console.log('‚ùå Errors encountered:', state.errors);\n}\n\n// Return all products for next steps\nreturn [{ \n  json: {\n    success: true,\n    totalProducts: state.allProducts.length,\n    products: state.allProducts,\n    metadata: {\n      totalAvailable: state.totalAvailable,\n      pagesFetched: state.page - 1,\n      errors: state.errors\n    }\n  }\n}];"
      },
      "id": "finish",
      "name": "Finish",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Initialize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize": {
      "main": [
        [
          {
            "node": "Switch Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Router": {
      "main": [
        [
          {
            "node": "Fetch Products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Finish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Products": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Wait 1s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1s": {
      "main": [
        [
          {
            "node": "Switch Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}