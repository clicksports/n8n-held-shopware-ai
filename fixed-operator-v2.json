{
  "name": "Fixed Operator V2 - Number Logic",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://shop.held.de/api/oauth/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "SWIANEPSMGTHMLJMT1BHEFAZNW"
            },
            {
              "name": "client_secret",
              "value": "UVJKRGFWZENoVW9OY1ZuUktYNkN6NFRucVNVQU1VR1B0cElhUzE"
            }
          ]
        }
      },
      "id": "oauth-node",
      "name": "Get OAuth",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [400, 400]
    },
    {
      "parameters": {
        "jsCode": "const response = $json;\nif (!response.access_token) throw new Error('OAuth failed');\nconsole.log('‚úÖ OAuth success');\nreturn [{ json: { token: response.access_token, page: 1, limit: 25, products: [], total: 0 } }];"
      },
      "id": "init-node",
      "name": "Initialize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "url": "=https://shop.held.de/api/product?page={{ $json.page }}&limit={{ $json.limit }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.token }}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "fetch-node",
      "name": "Fetch Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [800, 400]
    },
    {
      "parameters": {
        "jsCode": "const response = $json;\nconst state = $node[\"Initialize\"].json;\n\nif (response.error || !response.data) {\n  console.log('‚ùå Error:', response.error);\n  return [{ json: { ...state, hasMore: 0, error: response.error } }];\n}\n\nconst pageProducts = response.data || [];\nconst total = response.total || 0;\nconst currentPage = response.page || state.page;\nconst limit = response.limit || state.limit;\nconst totalPages = Math.ceil(total / limit);\nconst allProducts = [...state.products, ...pageProducts];\n\nconsole.log(`üìÑ Page ${currentPage}/${totalPages}: +${pageProducts.length} products`);\nconsole.log(`üìä Total collected: ${allProducts.length}/${total}`);\n\n// Use number logic: 1 = has more, 0 = no more\nconst hasMorePages = (currentPage < totalPages && pageProducts.length > 0) ? 1 : 0;\nconsole.log(`üîÑ Has more pages (number): ${hasMorePages}`);\nconsole.log(`‚ö° Logic: page ${currentPage} < ${totalPages} && got ${pageProducts.length} products`);\n\nreturn [{ \n  json: { \n    token: state.token, \n    page: currentPage + 1, \n    limit: limit, \n    products: allProducts, \n    total: total, \n    hasMore: hasMorePages,\n    debug: {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      pageProductsCount: pageProducts.length,\n      shouldContinue: hasMorePages === 1\n    }\n  } \n}];"
      },
      "id": "process-node",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "has-more-check",
              "leftValue": "={{ $json.hasMore }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-node",
      "name": "Has More?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "unit": "seconds",
        "value": 1
      },
      "id": "wait-node",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\nconsole.log('\\nüéâ PAGINATION COMPLETE!');\nconsole.log(`üìä Final count: ${data.products.length} products`);\nconsole.log(`üìà Available: ${data.total}`);\nconsole.log('üîç Debug info:', JSON.stringify(data.debug, null, 2));\n\n// Show sample products\nif (data.products && data.products.length > 0) {\n  const samples = data.products.slice(0, 3).map(p => ({ id: p.id, name: p.name }));\n  console.log('üì¶ Sample products:', JSON.stringify(samples, null, 2));\n}\n\nreturn [{ json: { success: true, totalProducts: data.products.length, totalAvailable: data.total, products: data.products } }];"
      },
      "id": "done-node",
      "name": "Done",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get OAuth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OAuth": {
      "main": [
        [
          {
            "node": "Initialize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize": {
      "main": [
        [
          {
            "node": "Fetch Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Products": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Has More?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has More?": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Fetch Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}