{
  "name": "Working Single Output - No Multi-Route",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://shop.held.de/api/oauth/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "SWIANEPSMGTHMLJMT1BHEFAZNW"
            },
            {
              "name": "client_secret",
              "value": "UVJKRGFWZENoVW9OY1ZuUktYNkN6NFRucVNVQU1VR1B0cElhUzE"
            }
          ]
        }
      },
      "id": "oauth-node",
      "name": "Get OAuth",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [400, 400]
    },
    {
      "parameters": {
        "jsCode": "const response = $json;\nif (!response.access_token) throw new Error('OAuth failed');\nconsole.log('‚úÖ OAuth success');\nreturn [{ json: { token: response.access_token, page: 1, limit: 25, allProducts: [] } }];"
      },
      "id": "init-node",
      "name": "Initialize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "url": "=https://shop.held.de/api/product?page={{ $json.page }}&limit={{ $json.limit }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.token }}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "fetch-node",
      "name": "Fetch Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [800, 400]
    },
    {
      "parameters": {
        "jsCode": "// Simple accumulate and continue logic\nconst response = $json;\nconst state = $node[\"Initialize\"].json;\n\nif (response.error || !response.data) {\n  console.log('‚ùå Error, finishing:', response.error);\n  const finalResult = {\n    success: false,\n    error: response.error,\n    totalProducts: state.allProducts.length,\n    products: state.allProducts\n  };\n  return [{ json: finalResult }];\n}\n\nconst pageProducts = response.data || [];\nconst total = response.total || 0;\nconst currentPage = response.page || state.page;\nconst limit = response.limit || state.limit;\nconst totalPages = Math.ceil(total / limit);\nconst allProducts = [...state.allProducts, ...pageProducts];\n\nconsole.log(`üìÑ Page ${currentPage}/${totalPages}: +${pageProducts.length} products`);\nconsole.log(`üìä Total collected: ${allProducts.length}/${total}`);\n\n// Check if we should continue (simple logic)\nif (currentPage < totalPages && pageProducts.length > 0) {\n  console.log('‚úÖ Continuing to next page...');\n  // Return state for next iteration\n  return [{ json: { \n    token: state.token, \n    page: currentPage + 1, \n    limit: limit, \n    allProducts: allProducts,\n    shouldContinue: true\n  } }];\n} else {\n  console.log('üèÅ Pagination complete!');\n  // Return final results\n  return [{ json: {\n    success: true,\n    totalProducts: allProducts.length,\n    totalAvailable: total,\n    products: allProducts,\n    shouldContinue: false\n  } }];\n}"
      },
      "id": "process-node",
      "name": "Process & Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "should-continue",
              "leftValue": "={{ $json.shouldContinue }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-node",
      "name": "Should Continue?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "unit": "seconds",
        "value": 1
      },
      "id": "wait-node",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\nconsole.log('\\nüéâ SYNC COMPLETE!');\nconsole.log(`üìä Final count: ${data.totalProducts} products`);\nif (data.totalAvailable) {\n  console.log(`üìà Available: ${data.totalAvailable}`);\n}\nif (data.products && data.products.length > 0) {\n  const samples = data.products.slice(0, 3).map(p => ({ id: p.id, name: p.name || p.productNumber }));\n  console.log('üì¶ Sample products:', JSON.stringify(samples, null, 2));\n}\nreturn [{ json: data }];"
      },
      "id": "done-node",
      "name": "Show Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get OAuth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OAuth": {
      "main": [
        [
          {
            "node": "Initialize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize": {
      "main": [
        [
          {
            "node": "Fetch Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Page": {
      "main": [
        [
          {
            "node": "Process & Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process & Check": {
      "main": [
        [
          {
            "node": "Should Continue?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Continue?": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Show Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Fetch Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}