{
  "name": "Fixed Pagination Workflow", 
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "jsCode": "// Initialize with explicit boolean\nconst config = {\n  page: 1,\n  limit: 50,\n  shouldContinue: true,  // Use different name to avoid confusion\n  allProducts: [],\n  totalFetched: 0\n};\n\nconsole.log('üöÄ Initializing with config:');\nconsole.log('shouldContinue:', config.shouldContinue, 'type:', typeof config.shouldContinue);\n\nreturn [{ json: config }];"
      },
      "id": "init",
      "name": "Init",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "jsCode": "// Debug the data going into IF node\nconst data = $json;\nconsole.log('\\nüîç DEBUG BEFORE IF NODE:');\nconsole.log('Full object:', JSON.stringify(data, null, 2));\nconsole.log('shouldContinue value:', data.shouldContinue);\nconsole.log('shouldContinue type:', typeof data.shouldContinue);\nconsole.log('shouldContinue === true:', data.shouldContinue === true);\n\n// Return the same data\nreturn $input.all();"
      },
      "id": "debug",
      "name": "Debug Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "should-continue",
              "leftValue": "={{ $json.shouldContinue }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-continue",
      "name": "Should Continue?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopwareApi",
        "url": "/api/search/product",
        "httpMethod": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  page: $json.page,\n  limit: $json.limit,\n  filter: [{\n    type: \"equals\",\n    field: \"active\",\n    value: true\n  }],\n  includes: {\n    product: [\"id\", \"name\", \"productNumber\", \"description\", \"price\", \"availableStock\"]\n  }\n}) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch",
      "name": "Fetch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1000, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Process API response and update shouldContinue\nconst response = $input.first().json;\nconst config = $node[\"Should Continue?\"].json;\n\nconsole.log('\\nüì• Processing API response...');\nconsole.log('Response has data:', !!response.data);\nconsole.log('Response error:', response.error);\n\nif (response.error || !response.data) {\n  console.log('‚ùå API error, stopping pagination');\n  return [{\n    json: {\n      ...config,\n      shouldContinue: false,\n      error: response.error\n    }\n  }];\n}\n\nconst products = response.data || [];\nconst total = response.total || 0;\nconst currentPage = config.page;\n\n// Calculate if we should continue\nconst totalPages = Math.ceil(total / config.limit);\nconst shouldContinue = currentPage < totalPages;\n\nconst allProducts = [...config.allProducts, ...products];\n\nconsole.log(`üìÑ Page ${currentPage}/${totalPages}: ${products.length} products`);\nconsole.log(`üìä Total: ${allProducts.length}/${total}`);\nconsole.log(`üîÑ Should continue: ${shouldContinue} (type: ${typeof shouldContinue})`);\n\nreturn [{\n  json: {\n    page: currentPage + 1,\n    limit: config.limit,\n    shouldContinue: shouldContinue,  // Explicit boolean\n    allProducts: allProducts,\n    totalFetched: allProducts.length,\n    totalAvailable: total\n  }\n}];"
      },
      "id": "process",
      "name": "Process",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "unit": "seconds",
        "value": 1
      },
      "id": "wait",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Final processing when pagination is done\nconst data = $json;\nconsole.log('\\nüéâ Pagination finished!');\nconsole.log(`üìä Total products collected: ${data.allProducts.length}`);\n\n// Convert to simple format for display\nconst summary = {\n  totalProducts: data.allProducts.length,\n  totalAvailable: data.totalAvailable,\n  lastPage: data.page - 1,\n  products: data.allProducts.slice(0, 5).map(p => ({\n    id: p.id,\n    name: p.name,\n    sku: p.productNumber\n  }))\n};\n\nconsole.log('üìã Summary:', JSON.stringify(summary, null, 2));\n\nreturn [{ json: summary }];"
      },
      "id": "finish",
      "name": "Finish",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1600, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Init",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init": {
      "main": [
        [
          {
            "node": "Debug Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Data": {
      "main": [
        [
          {
            "node": "Should Continue?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Continue?": {
      "main": [
        [
          {
            "node": "Fetch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Finish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch": {
      "main": [
        [
          {
            "node": "Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Should Continue?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}