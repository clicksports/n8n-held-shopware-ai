{
  "name": "Pagination Without IF Node",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "jsCode": "// Initialize pagination state\nconst state = {\n  page: 1,\n  limit: 20,\n  continueLoop: true,\n  allProducts: [],\n  totalPages: null,\n  errors: []\n};\n\nconsole.log('üöÄ Starting pagination without IF nodes');\nconsole.log('Initial state:', JSON.stringify(state, null, 2));\n\nreturn [{ json: state }];"
      },
      "id": "init",
      "name": "Initialize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "jsCode": "// JavaScript-based routing instead of IF node\nconst state = $json;\n\nconsole.log(`\\nüîÑ Loop iteration - Page ${state.page}`);\nconsole.log('continueLoop:', state.continueLoop, 'type:', typeof state.continueLoop);\nconsole.log('Current products collected:', state.allProducts.length);\n\nif (state.continueLoop === true) {\n  console.log('‚úÖ Continuing to fetch more products');\n  return [\n    { json: state }, // Send to fetch products\n    null // Don't send to finish\n  ];\n} else {\n  console.log('üèÅ Pagination complete, finishing');\n  return [\n    null, // Don't send to fetch\n    { json: state } // Send to finish\n  ];\n}"
      },
      "id": "router",
      "name": "JS Router",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopwareApi", 
        "url": "/api/search/product",
        "httpMethod": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  page: $json.page,\n  limit: $json.limit,\n  filter: [{\n    type: \"equals\",\n    field: \"active\", \n    value: true\n  }],\n  includes: {\n    product: [\"id\", \"name\", \"productNumber\", \"description\", \"price\", \"availableStock\"]\n  }\n}) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch",
      "name": "Fetch Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [800, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Process response and update state\nconst response = $input.first().json;\nconst state = $node[\"JS Router\"].json;\n\nconsole.log('\\nüì• Processing API response');\nconsole.log('Response has data:', !!response.data);\nconsole.log('Response error:', response.error);\n\nif (response.error || !response.data) {\n  console.log('‚ùå API error, stopping');\n  return [{\n    json: {\n      ...state,\n      continueLoop: false,\n      errors: [...state.errors, response.error || 'No data']\n    }\n  }];\n}\n\nconst products = response.data || [];\nconst total = response.total || 0;\nconst currentPage = state.page;\n\n// Calculate pagination\nconst totalPages = Math.ceil(total / state.limit);\nconst continueLoop = currentPage < totalPages;\n\n// Update state\nconst allProducts = [...state.allProducts, ...products];\n\nconsole.log(`üìÑ Page ${currentPage}/${totalPages}: ${products.length} products`);\nconsole.log(`üìä Total collected: ${allProducts.length}/${total}`);\nconsole.log(`üîÑ Will continue: ${continueLoop}`);\n\nconst newState = {\n  page: currentPage + 1,\n  limit: state.limit,\n  continueLoop: continueLoop,\n  allProducts: allProducts,\n  totalPages: totalPages,\n  totalFetched: allProducts.length,\n  totalAvailable: total,\n  errors: state.errors\n};\n\nreturn [{ json: newState }];"
      },
      "id": "process",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "unit": "seconds",
        "value": 1
      },
      "id": "wait",
      "name": "Wait 1s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Final summary when all products collected\nconst state = $json;\n\nconsole.log('\\nüéâ PAGINATION COMPLETE!');\nconsole.log(`üìä Final Results:`);\nconsole.log(`   Total products: ${state.allProducts.length}`);\nconsole.log(`   Total available: ${state.totalAvailable}`);\nconsole.log(`   Pages fetched: ${state.page - 1}`);\nconsole.log(`   Errors: ${state.errors.length}`);\n\nif (state.errors.length > 0) {\n  console.log('‚ùå Errors encountered:', state.errors);\n}\n\n// Create summary for output\nconst summary = {\n  success: true,\n  totalProducts: state.allProducts.length,\n  totalAvailable: state.totalAvailable,\n  pagesFetched: state.page - 1,\n  errors: state.errors,\n  sampleProducts: state.allProducts.slice(0, 3).map(p => ({\n    id: p.id,\n    name: p.name,\n    sku: p.productNumber\n  })),\n  readyForQdrant: true\n};\n\nconsole.log('üìã Summary for next steps:', JSON.stringify(summary, null, 2));\n\nreturn [{ json: summary }];"
      },
      "id": "finish",
      "name": "Finish",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Initialize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize": {
      "main": [
        [
          {
            "node": "JS Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JS Router": {
      "main": [
        [
          {
            "node": "Fetch Products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Finish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Products": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Wait 1s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1s": {
      "main": [
        [
          {
            "node": "JS Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}